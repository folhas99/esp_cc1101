#include "esphome/core/log.h"
#include "cc1101.h"

// #include <driver/gpio.h>

namespace esphome {
namespace cc1101 {

static const char *const TAG = "cc1101";

CC1101::CC1101(InternalGPIOPin *sck_pin, InternalGPIOPin *miso_pin, InternalGPIOPin *mosi_pin, InternalGPIOPin *csn_pin, InternalGPIOPin *gdo0_pin) {
  this->SCK_ = sck_pin;
  this->MISO_ = miso_pin;
  this->MOSI_ = mosi_pin;
  this->CSN_ = csn_pin;
  this->GDO0_ = gdo0_pin;

  this->_moduleNumber = 1;
}

void CC1101::set_bandwidth(float bandwidth) { bandwidth_ = bandwidth; }

void CC1101::set_frequency(float frequency) { frequency_ = frequency; }

/**
 * special setup() method that will be called once to set up the component
 * at the time the setup() method is called, all the setters generated by the Python codebase have already run and the all fields are set for your class.
 * The setup() method should set up the communication interface for the component and check if communication works (if not, it should call mark_failed()).
 * 
 */
void CC1101::setup() {
    ESP_LOGI(TAG, "CC1101 initialized.");

    pinMode(GDO0_->get_pin(), INPUT);
    
    ELECHOUSE_cc1101.addSpiPin(SCK_->get_pin(), MISO_->get_pin(), MOSI_->get_pin(), CSN_->get_pin(), _moduleNumber);
    ELECHOUSE_cc1101.setModul(_moduleNumber);
    ELECHOUSE_cc1101.Init();
    ELECHOUSE_cc1101.setRxBW(bandwidth_);
    ELECHOUSE_cc1101.setMHZ(frequency_);
    ELECHOUSE_cc1101.SetRx();
}

// Components should dump their configuration using ESP_LOGCONFIG at startup in dump_config()
void CC1101::dump_config() {
  ESP_LOGCONFIG(TAG, "CC1101:");
  LOG_PIN("  GDO0 Pin:  ", this->GDO0_);
  LOG_PIN("  SCK  Pin:  ", this->SCK_);
  LOG_PIN("  MISO Pin:  ", this->MISO_);
  LOG_PIN("  MOSI Pin:  ", this->MOSI_);
  LOG_PIN("  CSN  Pin:  ", this->CSN_);
  ESP_LOGCONFIG(TAG, "  Bandwith:  %.2f KHz", this->bandwidth_);
  ESP_LOGCONFIG(TAG, "  Frequency: %.2f MHz", this->frequency_);
}

}  // namespace cc1101
}  // namespace esphome